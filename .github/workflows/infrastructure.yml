name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform Action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
      environment:
        description: 'Target Environment'
        required: true
        default: 'demo'
        type: choice
        options:
        - demo
      location:
        description: 'Azure Region'
        required: false
        default: 'East US 2'
        type: string
      project_name:
        description: 'Project Name'
        required: false
        default: 'todo-app'
        type: string
      container_image:
        description: 'Container Image (optional)'
        required: false
        default: 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest'
        type: string
      confirm_destroy:
        description: 'Type "CONFIRM" to proceed with destroy'
        required: false
        type: string

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  terraform:
    name: "Terraform ${{ github.event.inputs.action || 'Deploy' }}"
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'demo' }}
    
    defaults:
      run:
        shell: bash
        working-directory: ./infra

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Format Check
      run: terraform fmt -check

    - name: Terraform Init
      run: terraform init

    - name: Generate tfvars file
      run: |
        echo "🔧 Creating demo.tfvars file dynamically..."
        mkdir -p environments
        
        # Set configuration values from inputs or defaults
        ENVIRONMENT="${{ github.event.inputs.environment || 'demo' }}"
        LOCATION="${{ github.event.inputs.location || 'East US 2' }}"
        PROJECT="${{ github.event.inputs.project_name || 'todo-app' }}"
        CONTAINER_IMAGE="${{ github.event.inputs.container_image || 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest' }}"
        REGISTRY_SKU="Basic"
        WEB_APP_SKU="Standard"
        
        echo "📝 Configuration values:"
        echo "  Environment: ${ENVIRONMENT}"
        echo "  Location: ${LOCATION}"
        echo "  Project: ${PROJECT}"
        echo "  Container Image: ${CONTAINER_IMAGE}"
        echo "  Registry SKU: ${REGISTRY_SKU}"
        echo "  Web App SKU: ${WEB_APP_SKU}"
        
        cat > environments/${ENVIRONMENT}.tfvars << EOF
        # Demo environment configuration - Generated by GitHub Actions
        # Generated at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        # GitHub Run: ${{ github.run_id }}
        # Repository: ${{ github.repository }}
        # Actor: ${{ github.actor }}
        # Workflow: ${{ github.workflow }}

        environment_name = "${ENVIRONMENT}"
        location        = "${LOCATION}"
        project_name    = "${PROJECT}"

        # Resource naming (leave empty to use auto-generated names)
        resource_group_name          = ""
        static_web_app_name         = ""
        container_app_name          = ""
        cosmos_db_account_name      = ""
        container_registry_name     = ""
        application_insights_name   = ""
        log_analytics_workspace_name = ""
        load_testing_name           = ""

        # Static Web Apps configuration
        static_web_app_sku = "${WEB_APP_SKU}"

        # Container Apps configuration
        container_app_cpu         = 0.25
        container_app_memory      = "0.5Gi"
        container_app_min_replicas = 0  # Zero scale capability
        container_app_max_replicas = 10

        # Container image (updatable via workflow input)
        container_image = "${CONTAINER_IMAGE}"

        # Cosmos DB configuration
        cosmos_db_database_name  = "TodoDB"
        cosmos_db_container_name = "TodoItems"

        # Container Registry configuration
        container_registry_sku = "${REGISTRY_SKU}"

        # Log Analytics configuration
        log_analytics_sku = "PerGB2018"

        # Common tags
        tags = {
          Environment = "${ENVIRONMENT}"
          Project     = "${PROJECT}"
          Purpose     = "SRE-Agent-Demo"
          CostCenter  = "Engineering"
          GitHubRepo  = "${{ github.repository }}"
          GitHubRun   = "${{ github.run_id }}"
          GitHubActor = "${{ github.actor }}"
          GitHubWorkflow = "${{ github.workflow }}"
          DeployedBy  = "GitHub-Actions"
          DeployedAt  = "$(date -u +"%Y-%m-%d")"
          Commit      = "${{ github.sha }}"
          Branch      = "${{ github.ref_name }}"
          RunAttempt  = "${{ github.run_attempt }}"
        }
        EOF
        
        echo "✅ Generated tfvars content for environment: ${ENVIRONMENT}"
        echo "📁 File path: environments/${ENVIRONMENT}.tfvars"
        echo "📋 Content preview:"
        head -20 environments/${ENVIRONMENT}.tfvars
        echo "..."
        echo "📊 File size: $(wc -l < environments/${ENVIRONMENT}.tfvars) lines"

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -var-file="environments/${{ github.event.inputs.environment || 'demo' }}.tfvars" -no-color -out=tfplan
        terraform show -no-color tfplan
      continue-on-error: false

    - name: Terraform Apply
      if: |
        (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
        (github.event.inputs.action == 'apply' && github.event_name == 'workflow_dispatch')
      run: |
        echo "🚀 Applying Terraform changes..."
        terraform apply -auto-approve tfplan

    - name: Confirm Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        if [ "${{ github.event.inputs.confirm_destroy }}" != "CONFIRM" ]; then
          echo "❌ Destroy action requires 'CONFIRM' in the confirm_destroy input"
          exit 1
        fi
        echo "⚠️  Proceeding with infrastructure destruction..."

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy' && github.event.inputs.confirm_destroy == 'CONFIRM'
      run: |
        echo "🗑️ Destroying infrastructure..."
        terraform destroy -var-file="environments/${{ github.event.inputs.environment || 'demo' }}.tfvars" -auto-approve

    - name: Output Important Values
      if: |
        (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
        (github.event.inputs.action == 'apply' && github.event_name == 'workflow_dispatch')
      run: |
        echo "📋 Terraform Outputs:"
        echo "CONTAINER_APPS_FQDN=$(terraform output -raw container_apps_fqdn)" >> $GITHUB_ENV
        echo "STATIC_WEB_APP_HOSTNAME=$(terraform output -raw static_web_app_hostname)" >> $GITHUB_ENV
        echo "COSMOS_DB_ENDPOINT=$(terraform output -raw cosmos_db_endpoint)" >> $GITHUB_ENV
        
        # 出力値をサマリーに表示
        echo "## 🎯 Infrastructure Deployment Results" >> $GITHUB_STEP_SUMMARY
        echo "| Resource | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Container Apps FQDN | $(terraform output -raw container_apps_fqdn) |" >> $GITHUB_STEP_SUMMARY
        echo "| Static Web App Hostname | $(terraform output -raw static_web_app_hostname) |" >> $GITHUB_STEP_SUMMARY
        echo "| Cosmos DB Endpoint | $(terraform output -raw cosmos_db_endpoint) |" >> $GITHUB_STEP_SUMMARY

    - name: Upload Terraform Plan
      if: github.event.inputs.action == 'plan' || github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ github.event.inputs.environment || 'demo' }}
        path: infra/tfplan
        retention-days: 30

    - name: Comment PR with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const { execSync } = require('child_process');
          
          // Terraform planの結果を取得
          const planOutput = execSync('cd infra && terraform show -no-color tfplan', { encoding: 'utf-8' });
          
          const comment = `## 🏗️ Terraform Plan Results
          
          <details>
          <summary>📋 Click to expand plan output</summary>
          
          \`\`\`hcl
          ${planOutput}
          \`\`\`
          </details>
          
          **Action Required:** Review the plan and merge to apply changes automatically.
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
